apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: kube-system
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
          volumeMounts:
            - name: grafana-provisioning
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
              readOnly: true
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
              readOnly: true
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
      volumes:
        - name: grafana-provisioning
          configMap:
            name: grafana-provisioning
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboard-json
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: kube-system
spec:
  selector:
    app: grafana
  ports:
    - name: http
      port: 80
      targetPort: 3000
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: kube-system
data:
  dashboard.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-json
  namespace: kube-system
data:
  app-dashboard.json: |
    {
      "id": null,
      "uid": "app-metrics-dashboard",
      "title": "Application Metrics",
      "timezone": "browser",
      "schemaVersion": 30,
      "version": 1,
      "refresh": "10s",
      "panels": [
        {
          "title": "HTTP Request Duration (Node.js)",
          "type": "timeseries",
          "targets": [
            {
              "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))",
              "refId": "A"
            }
          ],
          "gridPos": { "x": 0, "y": 0, "w": 12, "h": 8 }
        },
        {
          "title": "HTTP 5xx Errors (Node.js)",
          "type": "timeseries",
          "targets": [
            {
              "expr": "sum(rate(http_requests_total{status=~\"5..\"}[5m]))",
              "refId": "B"
            }
          ],
          "gridPos": { "x": 12, "y": 0, "w": 12, "h": 8 }
        },
        {
          "title": "Node.js CPU Usage",
          "type": "timeseries",
          "targets": [
            {
              "expr": "avg(rate(process_cpu_seconds_total[1m])) by (instance)",
              "refId": "C"
            }
          ],
          "gridPos": { "x": 0, "y": 8, "w": 12, "h": 8 }
        },
        {
          "title": "Node.js Memory Usage",
          "type": "timeseries",
          "targets": [
            {
              "expr": "avg(process_resident_memory_bytes) by (instance)",
              "refId": "D"
            }
          ],
          "gridPos": { "x": 12, "y": 8, "w": 12, "h": 8 }
        },
        {
          "title": "Redis Latency (Commands Duration)",
          "type": "timeseries",
          "targets": [
            {
              "expr": "rate(redis_command_duration_seconds_sum[5m]) / rate(redis_command_duration_seconds_count[5m])",
              "refId": "E"
            }
          ],
          "gridPos": { "x": 0, "y": 16, "w": 12, "h": 8 }
        },
        {
          "title": "Redis CPU Usage",
          "type": "timeseries",
          "targets": [
            {
              "expr": "rate(process_cpu_seconds_total{job=\"redis\"}[5m])",
              "refId": "F"
            }
          ],
          "gridPos": { "x": 12, "y": 16, "w": 12, "h": 8 }
        },
        {
          "title": "Redis Memory Usage",
          "type": "timeseries",
          "targets": [
            {
              "expr": "redis_memory_used_bytes{job=\"redis\"}",
              "refId": "G"
            }
          ],
          "gridPos": { "x": 0, "y": 24, "w": 12, "h": 8 }
        },
        {
          "title": "Redis Connected Clients",
          "type": "timeseries",
          "targets": [
            {
              "expr": "redis_connected_clients{job=\"redis\"}",
              "refId": "H"
            }
          ],
          "gridPos": { "x": 12, "y": 24, "w": 12, "h": 8 }
        },
        {
          "title": "Active Pods (Kubernetes)",
          "type": "timeseries",
          "targets": [
            {
              "expr": "count(kube_pod_status_phase{phase=\"Running\"})",
              "refId": "I"
            }
          ],
          "gridPos": { "x": 0, "y": 32, "w": 12, "h": 8 }
        },
        {
          "title": "Pod Scaling Events (Kubernetes)",
          "type": "timeseries",
          "targets": [
            {
              "expr": "increase(kube_deployment_status_replicas_updated[5m])",
              "refId": "J"
            }
          ],
          "gridPos": { "x": 12, "y": 32, "w": 12, "h": 8 }
        }
      ]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: kube-system
data:
  grafana.ini: |
    [server]
    http_port = 3000
    domain = localhost
    root_url = http://localhost:3000
    [auth]
    disable_login_form = false
    disable_signout_menu = false
    [security]
    admin_password = admin
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: kube-system
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-server.kube-system.svc.cluster.local:9090
        access: proxy
        isDefault: true
        version: 1
        editable: true

